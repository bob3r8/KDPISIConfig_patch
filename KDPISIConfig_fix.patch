From 12600fe25484284407058568cf93339d089823f7 Mon Sep 17 00:00:00 2001
From: bobr <mrthebober@gmail.com>
Date: Wed, 29 Sep 2021 11:05:07 +0700
Subject: [PATCH] KDPISIConfig fix

KDPISIConfig object constructor fixed. Example attached.
---
 python/common/constants.py                    | 17 +++-
 .../examples_kl720/cam_isi_yolov5s_example.py | 81 +++++++++++++++++++
 2 files changed, 96 insertions(+), 2 deletions(-)
 create mode 100644 python/examples_kl720/cam_isi_yolov5s_example.py

diff --git a/python/common/constants.py b/python/common/constants.py
index 3e32f93..aea1363 100644
--- a/python/common/constants.py
+++ b/python/common/constants.py
@@ -3,6 +3,7 @@ Constants used for various examples calling the Python host API.
 """
 import ctypes
 import enum
+import struct
 
 ## Structures used for C shared library
 class KDPClass(ctypes.Structure):
@@ -680,13 +681,25 @@ class KDPISIConfig(KDPClass):
                 ("ext_param", ctypes.c_float * MAX_PARAMS_LEN)] # extra parameters, like threshold
 
     def __init__(self, app_id=0, res_buf_size=0, image_col=0, image_row=0, image_format=0,
-                ext_param=[0]):
+                ext_param=[0], ext_param_types=['I']):
         self.app_id = app_id
         self.res_buf_size = res_buf_size
         self.image_col = image_col
         self.image_row = image_row
         self.image_format = image_format
-        self.ext_param = (ctypes.c_float * MAX_PARAMS_LEN)(*ext_param)
+        if len(ext_param_types) < MAX_PARAMS_LEN:
+            ext_param_types.extend(['I'] * (MAX_PARAMS_LEN - len(ext_param_types)))
+        float_container = b''
+        j = 0
+        for i in range(len(ext_param)):
+            inp = struct.pack(ext_param_types[i], ext_param[i])
+            float_container += inp
+            try:
+                self.ext_param[j] = struct.unpack('!f', float_container[::-1])[0]
+                j += 1
+                float_container = b''
+            except Exception as e:
+                pass
 
     def __repr__(self):
         extra = "\n"
diff --git a/python/examples_kl720/cam_isi_yolov5s_example.py b/python/examples_kl720/cam_isi_yolov5s_example.py
new file mode 100644
index 0000000..1e89f20
--- /dev/null
+++ b/python/examples_kl720/cam_isi_yolov5s_example.py
@@ -0,0 +1,81 @@
+from common import constants, kdp_wrapper
+import kdp_host_api as api
+import time
+import ctypes
+import sys
+
+VIDEO_SOURCE = 0
+
+
+def yolo_v5s_detection(device_index):
+    app_id = constants.AppID.APP_CENTER_APP.value
+    kdp_wrapper.isi_load_nef(device_index, '../input_models/KL720/kl720_yolov5s/models_720.nef', app_id)
+    model_id = 211
+    res_buf_size = 2048
+    image_source_w = 640
+    image_source_h = 480
+    ext_param = [0.15, 0.45, 20, 3, 6, 3, 0,
+                 # anchors[3][6]
+                 10, 13, 16, 30, 33, 23,
+                 30, 61, 62, 45, 59, 119,
+                 116, 90, 156, 198, 373, 326,
+                 # strides[3]
+                 8, 16, 32,
+                 ]
+    ext_param_types = ['f', 'f', 'I', 'H', 'H', 'H', 'H']
+    image_format = constants.IMAGE_FORMAT_SUB128 | constants.NPU_FORMAT_RGB565 | constants.IMAGE_FORMAT_CHANGE_ASPECT_RATIO
+    isi_configuration = constants.KDPISIConfig(app_id, res_buf_size, image_source_w, image_source_h, image_format, ext_param, ext_param_types)
+    cfg_size = 136
+    image_buf_size = kdp_wrapper.start_isi_mode_ext(device_index, isi_configuration, cfg_size)
+
+    if image_buf_size < 3:
+        print(f"ISI mode window {image_buf_size} too small...\n")
+        return -1
+    print(f"\nConfig model {model_id}...\n")
+    ret = kdp_wrapper.isi_config(device_index, model_id, 0)
+    if ret:
+        print(f"ISI config returned {ret}\n")
+        return -1
+
+    capture = kdp_wrapper.setup_capture(VIDEO_SOURCE, image_source_w, image_source_h)
+
+    img_id_tx = 1
+    img_id_rx = img_id_tx
+    buf_len = image_source_w * image_source_h * 2
+    t_all = time.time()
+    while True:
+        t = time.time()
+        frames = []
+        error_code = ctypes.c_uint32(0)
+        img_buf_left = ctypes.c_uint32(0)
+        img_buf = kdp_wrapper.isi_capture_frame(capture, frames)
+        ret = api.kdp_isi_inference(device_index, img_buf, buf_len, img_id_tx,
+                                    ctypes.byref(error_code), ctypes.byref(img_buf_left))
+        if ret:
+            print(f"kdp_isi_inference returned: {ret}")
+            return -1
+        img_id_tx += 1
+
+        r_data = (ctypes.c_char * 2048)()
+        rsp_code = ctypes.c_uint32(0)
+        r_size = ctypes.c_uint32(0)
+        ret = api.kdp_isi_retrieve_res(device_index, img_id_rx, ctypes.byref(rsp_code), ctypes.byref(r_size), r_data)
+        if ret:
+            print(f"kdp_isi_retrieve_res returned: {ret}")
+            return -1
+        img_id_rx += 1
+
+        od_header_res = kdp_wrapper.cast_and_get(r_data, constants.YoloResult)
+        box_result = kdp_wrapper.cast_and_get(od_header_res.boxes, constants.BoundingBox * od_header_res.box_count)[
+                     :od_header_res.box_count]
+        dets = [[b.x1, b.y1, b.x2, b.y2, b.score, b.class_num] for b in box_result]
+        kdp_wrapper.draw_capture_result(device_index, dets, frames, 'yolo')
+
+        print('\rFPS: {:.2f}, AVG: {:.2f}'.format(1/(time.time() - t), img_id_tx/(time.time() - t_all)), end='')
+
+
+def user_test(device_index, _user_id):
+    ret = yolo_v5s_detection(device_index)
+    kdp_wrapper.end_det(device_index)
+    return ret
+
-- 
2.17.1

